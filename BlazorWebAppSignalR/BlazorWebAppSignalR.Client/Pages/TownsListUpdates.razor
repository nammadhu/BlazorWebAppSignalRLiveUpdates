@page "/towns"
@using Microsoft.AspNetCore.SignalR.Client
@using Shared
@inject NavigationManager Navigation

<h3>Real-Time Town Updates</h3>

<input @bind="newTownName" placeholder="Enter new town name" />
<button @onclick="AddTown">Add Town</button>

<ul>
    @foreach (var town in towns)
    {
        <li>@town.Name</li>
    }
</ul>
@* <button @onclick="SendMessage">Send Test Update</button> *@

@code {
    [Parameter]
    public string TownId { get; set; }
    private List<TownDto> towns = new List<TownDto>();
    private HubConnection connection;
    private string newTownName;
    protected override async Task OnInitializedAsync()
    {
        connection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/TownsHub"))
            .Build();

        connection.On<List<TownDto>>("ReceiveMessage", (updatedTowns) =>
        {
            // Update towns list
            //towns.Add(town);

            // Update towns list
            towns = updatedTowns;
            StateHasChanged();
        });

        await connection.StartAsync();
        // await connection.InvokeAsync("JoinGroup", TownId);

        // Initial data load
        //towns = new List<TownDto> { new TownDto() { Id = "0", Name = "Zero Town" } }; //await TownService.GetTownsAsync(TownId);
    }
    private async Task AddTown()
    {
        if (!string.IsNullOrEmpty(newTownName))
        {
            var townDto = new TownDto { Id = Guid.NewGuid().ToString(), Name = newTownName };
            await connection.InvokeAsync("AddTown", townDto);
            newTownName = string.Empty;
        }
    }

    /*
    public async Task SendMessage()
    {
        var townDto = new TownDto { Id = TownId, Name = "Updated Town:"+DateTime.Now.ToString() }; // Example data
        await connection.InvokeAsync("SendMessageToGroup", TownId, townDto);
    }
    */

    public async ValueTask DisposeAsync()
    {
        //await connection.InvokeAsync("LeaveGroup", TownId);
        await connection.StopAsync();
        await connection.DisposeAsync();
    }
}

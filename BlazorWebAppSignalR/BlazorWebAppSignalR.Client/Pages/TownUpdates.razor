@page "/town/{TownId}"
@using Microsoft.AspNetCore.SignalR.Client
@using Shared
@inject NavigationManager Navigation

<h3>Real-Time Business Cards for @TownId</h3>

<input @bind="newBusinessName" placeholder="Enter business name" />
<input @bind="newContactName" placeholder="Enter contact name" />
<input @bind="newPhoneNumber" placeholder="Enter phone number" />
<input @bind="newEmail" placeholder="Enter email" />
<button @onclick="AddBusinessCard">Add Business Card</button>

<ul>
    @foreach (var card in businessCards)
    {
        <li>@card.BusinessName - @card.ContactName - @card.PhoneNumber - @card.Email</li>
    }
</ul>
<button @onclick="SendMessage">Send Test Update</button>

@code {
    private HubConnection connection;
    [Parameter]
    public string TownId { get; set; }

    private List<BusinessCard> businessCards = new List<BusinessCard>();

    private string newBusinessName;
    private string newContactName;
    private string newPhoneNumber;
    private string newEmail;

    protected override async Task OnInitializedAsync()
    {
        connection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/townhub"))
            .Build();

        connection.On<List<BusinessCard>>("ReceiveBusinessCards", (cards) =>
        {
            // Update towns list
            businessCards = cards;
            StateHasChanged();

        });

        await connection.StartAsync();
        await connection.InvokeAsync("JoinGroup", TownId);
        // Initial data load - moved to JoinGroup in the hub
        //towns = new List<TownDto> { new TownDto() { Id = "0", Name = "Zero Town" } }; //await TownService.GetTownsAsync(TownId);
    }
    private async Task AddBusinessCard()
    {
        if (!string.IsNullOrEmpty(newBusinessName) && !string.IsNullOrEmpty(newContactName))
        {
            var businessCardDto = new BusinessCard
                {
                    Id = Guid.NewGuid().ToString(),
                    BusinessName = newBusinessName,
                    ContactName = newContactName,
                    PhoneNumber = newPhoneNumber,
                    Email = newEmail
                };
            await connection.InvokeAsync("AddBusinessCard", TownId, businessCardDto);
            newBusinessName = string.Empty;
            newContactName = string.Empty;
            newPhoneNumber = string.Empty;
            newEmail = string.Empty;
        }
    }
    public async Task SendMessage()
    {
        var townDto = new TownDto { Id = TownId, Name = "Updated Town:" + DateTime.Now.ToString() }; // Example data
        await connection.InvokeAsync("SendMessageToGroup", TownId, townDto);
    }

    public async ValueTask DisposeAsync()
    {
        await connection.InvokeAsync("LeaveGroup", TownId);
        await connection.StopAsync();
        await connection.DisposeAsync();
    }
}

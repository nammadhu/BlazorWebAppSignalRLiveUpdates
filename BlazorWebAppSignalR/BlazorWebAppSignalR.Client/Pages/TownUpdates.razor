@page "/town/{TownId}"
@using Microsoft.AspNetCore.SignalR.Client
@using Shared
@inject NavigationManager Navigation

<h3>Real-Time Business Cards for @TownId</h3>
@if (!isConnected)
{
    <p>Connection lost. Attempting to reconnect...</p>
}
else if (isLoading)
{
    <p>Loading...</p>
}

<input @bind="newBusinessName" placeholder="Enter business name" />
<input @bind="newContactName" placeholder="Enter contact name" />
<input @bind="newPhoneNumber" placeholder="Enter phone number" />
<input @bind="newEmail" placeholder="Enter email" />
<button @onclick="AddBusinessCard">Add Business Card</button>

<ul>
    @foreach (var card in businessCards)
    {
        <li>
            @card.BusinessName - @card.ContactName - @card.PhoneNumber - @card.Email
            <button @onclick="() => EditBusinessCard(card)">Edit</button>
        </li>
    }
</ul>

@code {
    private HubConnection connection;
    [Parameter]
    public string TownId { get; set; }

    private List<BusinessCard> businessCards = new List<BusinessCard>();

    private string newBusinessName;
    private string newContactName;
    private string newPhoneNumber;
    private string newEmail;
    private string editBusinessCardId;

    private bool isConnected = true;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        connection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/townhub"))
            .Build();
        connection.Closed += async (error) =>
                {
                    isConnected = false;
                    StateHasChanged();
                    while (!isConnected)
                    {
                        try
                        {
                            await Task.Delay(5000);
                            await connection.StartAsync();
                            await connection.InvokeAsync("JoinGroup", TownId);
                            isConnected = true;
                        }
                        catch
                        {
                            // Reconnection failed, continue loop
                        }

                        StateHasChanged();
                    }
                };

        connection.On<List<BusinessCard>>("ReceiveInitialBusinessCards", (initialCards) =>
        {
            businessCards = initialCards;
            isLoading = false;
            StateHasChanged();
        });

        connection.On<BusinessCard>("ReceiveBusinessCard", (updatedCard) =>
        {
            // Update or add the business card in the list
            var index = businessCards.FindIndex(bc => bc.Id == updatedCard.Id);
            if (index >= 0)
            {
                businessCards[index] = updatedCard;
            }
            else
            {
                businessCards.Add(updatedCard);
            }
            StateHasChanged();
        });

        await connection.StartAsync();
        await connection.InvokeAsync("JoinGroup", TownId);
        // Initial data load - moved to JoinGroup in the hub response
        //towns = new List<TownDto> { new TownDto() { Id = "0", Name = "Zero Town" } }; //await TownService.GetTownsAsync(TownId);
    }
    private async Task AddBusinessCard()
    {
        if (!string.IsNullOrEmpty(newBusinessName) && !string.IsNullOrEmpty(newContactName))
        {
            var businessCardDto = new BusinessCard
                {
                    Id = string.IsNullOrEmpty(editBusinessCardId) ? Guid.NewGuid().ToString() : editBusinessCardId,
                    BusinessName = newBusinessName,
                    ContactName = newContactName,
                    PhoneNumber = newPhoneNumber,
                    Email = newEmail
                };
            if (string.IsNullOrEmpty(editBusinessCardId))
            {
                await connection.InvokeAsync("AddBusinessCard", TownId, businessCardDto);
            }
            else
            {
                await connection.InvokeAsync("UpdateBusinessCard", TownId, businessCardDto);
                editBusinessCardId = null;
            }
            newBusinessName = string.Empty;
            newContactName = string.Empty;
            newPhoneNumber = string.Empty;
            newEmail = string.Empty;
        }
    }
    private void EditBusinessCard(BusinessCard card)
    {
        newBusinessName = card.BusinessName;
        newContactName = card.ContactName;
        newPhoneNumber = card.PhoneNumber;
        newEmail = card.Email;
        editBusinessCardId = card.Id;
    }
    public async ValueTask DisposeAsync()
    {
        await connection.InvokeAsync("LeaveGroup", TownId);
        await connection.StopAsync();
        await connection.DisposeAsync();
    }
}
